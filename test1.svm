struct Vector3{
	float x;
	float y;
	float z;
};

struct VectorTri{
	Vector3 pos;
	int scale;
};

int Summation(int n){
	int total = 0;
	int counter = 1;
	while(counter < n+1){
		total = total + counter;
		counter = counter + 1;
	}
	
	return total;
}

int Factorial(int x){
	if(x < 2){
		return 1;
	}
	
	return x * Factorial(x-1);
}


float Madd(float a, float b, float c){
	return a*b + a*c;
}


float MagnitudeSqr(Vector3 vec){
	return vec.x * vec.x + vec.y*vec.y + vec.z*vec.z;
}

int PrintVector(Vector3 vec){
	PRINTF(vec.x);
	PRINTF(vec.y);
	PRINTF(vec.z);
	
	return 0;
}

int PrintTri(VectorTri tri){
	PRINT(tri.scale);
	return PrintVector(tri.pos);
}

Vector3 MakeVec(float x, float y, float z){
	Vector3 vec;
	vec.x = x;
	vec.y = y;
	vec.z = z;
	
	return vec;
}

VectorTri MakeTri(int size, Vector3 pos){
	VectorTri tri;
	tri.pos = pos;
	tri.scale = size;
	
	return tri;
}

Vector3 AddVec(Vector3 a, Vector3 b){
	
	Vector3 result;
	result.x = a.x + b.x;
	result.y = a.y + b.y;
	result.z = a.z + b.z;
	
	return result;
}

float subtract(float x, float y){
	return x - y;
}

int main(){

	VectorTri tri = MakeTri(19, MakeVec(1.1, 2.2, 3.3));
	
	VectorTri tri2 = tri;
	
	tri2.pos = MakeVec(3.4, 5.6, 8.2);
	
	int xx = PrintTri(tri);
	xx = PrintTri(tri2);
	
	return 0;
}

